syntax = "proto3";

import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

package protocol.core.v1;

option go_package = "core;corev1";

// OVERRIDES
message Override {
  string name = 1;
  string avatar = 2;
  oneof reason {
    string user_defined = 3;
    google.protobuf.Empty webhook = 4;
    google.protobuf.Empty system_plurality =
        5; // plurality, not system as in computer
    google.protobuf.Empty system_message = 6;
    google.protobuf.Empty bridge = 7;
  }
}

// EMBEDS AND ACTIONS

enum ActionType { Normal = 0; Primary = 1; Destructive = 2; }

enum ActionPresentation {
  Button = 0; Dropdown = 1; Menu = 2; SmallEntry = 3; LargeEntry = 4;
}

enum FieldPresentation { Data = 0; CaptionedImage = 1; Row = 2; }

// Rules on actions:
// Actions without a type are assumed to be Button actions or Menu actions when
// nested. Button actions can only have Menu actions as children. Dropdown
// actions can only have non-recursive Menu actions as children. Menu actions
// can only have other Menu actions as children. SmallEntry and LargeActions
// cannot have children.
message Action {
  string text = 1;
  string url = 2;
  string id = 3;
  ActionType type = 4;
  ActionPresentation presentation = 5;
  repeated Action children = 6;
}

message EmbedHeading {
  string text = 1;
  string subtext = 2;
  string url = 3;
  string icon = 4;
}

message EmbedField {
  string title = 1;
  string subtitle = 2;
  string body = 3;

  string image_url = 4;

  FieldPresentation presentation = 5;

  repeated Action actions = 6;
}

message Embed {
  string title = 1;
  string body = 2;

  int64 color = 3;

  EmbedHeading header = 4;
  EmbedHeading footer = 5;

  repeated EmbedField fields = 6;
  repeated Action actions = 7;
}

// TYPES

message Message {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 message_id = 3 [jstype = JS_STRING];
  uint64 author_id = 4 [jstype = JS_STRING];
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp edited_at = 6;
  string content = 7;
  repeated Embed embeds = 8;
  repeated Action actions = 9;
  repeated string attachments = 10;
  uint64 in_reply_to = 11 [jstype = JS_STRING];
  Override overrides = 12;
}

// CREATE

message CreateGuildRequest {
  string guild_name = 1;
  string picture_url = 2;
}
message CreateGuildResponse { uint64 guild_id = 1 [jstype = JS_STRING]; }

message CreateInviteRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string name = 2;
  int32 possible_uses = 3;
}
message CreateInviteResponse { string name = 1; }

message CreateChannelRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string channel_name = 2 [(validate.rules).string.min_len = 1];
  bool is_category = 3;
  uint64 previous_id = 5 [jstype = JS_STRING];
  uint64 next_id = 4 [jstype = JS_STRING];
}
message CreateChannelResponse { uint64 channel_id = 1 [jstype = JS_STRING]; }

message CreateEmotePackRequest { string pack_name = 1; }
message CreateEmotePackResponse { uint64 pack_id = 1 [jstype = JS_STRING]; }

// READ

message GetGuildListRequest {}

message GetGuildListResponse {
  message GuildListEntry {
    uint64 guild_id = 1 [jstype = JS_STRING];
    string host = 2;
  }

  repeated GuildListEntry guilds = 1;
}

message GetGuildRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }
message GetGuildResponse {
  string guild_name = 1;
  uint64 guild_owner = 2 [jstype = JS_STRING];
  string guild_picture = 3;
}

message GetGuildInvitesRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }
message GetGuildInvitesResponse {
  message Invite {
    string invite_id = 1;
    int32 possible_uses = 2;
    int32 use_count = 3;
  }
  repeated Invite invites = 1;
}

message GetGuildMembersRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }
message GetGuildMembersResponse {
  repeated uint64 members = 1 [jstype = JS_STRING];
}

message GetGuildChannelsRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }
message GetGuildChannelsResponse {
  message Channel {
    uint64 channel_id = 1 [jstype = JS_STRING];
    string channel_name = 2;
    bool is_category = 3;
    bool is_voice = 4;
  }

  repeated Channel channels = 1;
}

message GetChannelMessagesRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 before_message = 3 [jstype = JS_STRING];
}
message GetChannelMessagesResponse {
  bool reached_top = 1;
  repeated Message messages = 2;
}

message GetMessageRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 message_id = 3 [jstype = JS_STRING];
}
message GetMessageResponse { Message message = 1; }

message GetEmotePacksRequest {}
message GetEmotePacksResponse {
  message EmotePack {
    uint64 pack_id = 1 [jstype = JS_STRING];
    uint64 pack_owner = 2 [jstype = JS_STRING];
    string pack_name = 3;
  }

  repeated EmotePack packs = 1;
}

message GetEmotePackEmotesRequest { uint64 pack_id = 1 [jstype = JS_STRING]; }
message GetEmotePackEmotesResponse {
  message Emote {
    string image_id = 1;
    string name = 2;
  }

  repeated Emote emotes = 1;
}

// UPDATE

message UpdateGuildNameRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string new_guild_name = 2;
}

message UpdateChannelNameRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  string new_channel_name = 3;
}

message UpdateChannelOrderRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 previous_id = 3 [jstype = JS_STRING];
  uint64 next_id = 4 [jstype = JS_STRING];
}

message UpdateMessageRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 message_id = 3 [jstype = JS_STRING];
  string content = 4;
  bool update_content = 5;
  repeated Embed embeds = 6;
  bool update_embeds = 7;
  repeated Action actions = 8;
  bool update_actions = 9;
  repeated string attachments = 10;
  bool update_attachments = 11;
  Override overrides = 12;
  bool update_overrides = 13;
}

message AddEmoteToPackRequest {
  uint64 pack_id = 1 [jstype = JS_STRING];
  string image_id = 2;
  string name = 3;
}

// DELETE

message DeleteGuildRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }

message DeleteInviteRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string invite_id = 2;
}

message DeleteChannelRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
}

message DeleteMessageRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 message_id = 3 [jstype = JS_STRING];
}

message DeleteEmoteFromPackRequest {
  uint64 pack_id = 1 [jstype = JS_STRING];
  string image_id = 2;
}

message DeleteEmotePackRequest { uint64 pack_id = 1 [jstype = JS_STRING]; }

message DequipEmotePackRequest { uint64 pack_id = 1 [jstype = JS_STRING]; }

// STREAMS

message StreamEventsRequest {
  message SubscribeToGuild { uint64 guild_id = 1 [jstype = JS_STRING]; }
  message SubscribeToActions {}
  message SubscribeToHomeserverEvents {}

  oneof request {
    SubscribeToGuild subscribe_to_guild = 1;
    SubscribeToActions subscribe_to_actions = 2;
    SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
  }
}

message Event {
  message MessageSent { Message message = 2; }
  message MessageUpdated {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
    uint64 message_id = 3 [jstype = JS_STRING];
    google.protobuf.Timestamp edited_at = 4;
    string content = 5;
    bool update_content = 6;
    repeated Embed embeds = 7;
    bool update_embeds = 8;
    repeated Action actions = 9;
    bool update_actions = 10;
    repeated string attachments = 11;
    bool update_attachments = 12;
    Override overrides = 13;
    bool update_overrides = 14;
  }
  message MessageDeleted {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
    uint64 message_id = 3 [jstype = JS_STRING];
  }
  message ChannelCreated {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
    string name = 3;
    uint64 previous_id = 4 [jstype = JS_STRING];
    uint64 next_id = 5 [jstype = JS_STRING];
    bool is_category = 6;
  }
  message ChannelUpdated {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
    string name = 3;
    bool update_name = 4;
    uint64 previous_id = 5 [jstype = JS_STRING];
    uint64 next_id = 6 [jstype = JS_STRING];
    bool update_order = 7;
  }
  message ChannelDeleted {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
  }
  message GuildUpdated {
    uint64 guild_id = 1 [jstype = JS_STRING];
    string name = 2;
    bool update_name = 3;
  }
  message GuildDeleted { uint64 guild_id = 1 [jstype = JS_STRING]; }
  message MemberJoined {
    uint64 member_id = 1 [jstype = JS_STRING];
    uint64 guild_id = 2 [jstype = JS_STRING];
  }
  message MemberLeft {
    uint64 member_id = 1 [jstype = JS_STRING];
    uint64 guild_id = 2 [jstype = JS_STRING];
  }
  message GuildAddedToList {
    uint64 guild_id = 1 [jstype = JS_STRING];
    string homeserver = 2;
  }
  message GuildRemovedFromList {
    uint64 guild_id = 1 [jstype = JS_STRING];
    string homeserver = 2;
  }
  message ActionPerformed {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 channel_id = 2 [jstype = JS_STRING];
    uint64 message_id = 3 [jstype = JS_STRING];
    string action_id = 4;
    string action_data = 5;
  }
  message RoleMoved {
    uint64 guild_id = 1 [jstype = JS_STRING];
    uint64 role_id = 2 [jstype = JS_STRING];
  }

  oneof event {
    GuildAddedToList guild_added_to_list = 1;
    GuildRemovedFromList guild_removed_from_list = 2;
    ActionPerformed action_performed = 3;
    MessageSent sent_message = 4;
    MessageUpdated edited_message = 5;
    MessageDeleted deleted_message = 6;
    ChannelCreated created_channel = 7;
    ChannelUpdated edited_channel = 8;
    ChannelDeleted deleted_channel = 9;
    GuildUpdated edited_guild = 10;
    GuildDeleted deleted_guild = 11;
    MemberJoined joined_member = 12;
    MemberLeft left_member = 13;
    RoleMoved role_moved = 14;
  }
}

// MEMBERSHIP

message JoinGuildRequest { string invite_id = 1; }
message JoinGuildResponse { uint64 guild_id = 1 [jstype = JS_STRING]; }

message LeaveGuildRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }

// TRIGGERS

message TriggerActionRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 message_id = 3 [jstype = JS_STRING];
  string action_id = 4;
  string action_data = 5;
}

// SendMessage
message SendMessageRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  string content = 3;
  repeated Action actions = 4;
  repeated Embed embeds = 5;
  repeated string attachments = 6;
  uint64 in_reply_to = 7;
  Override overrides = 8;
}
message SendMessageResponse { uint64 message_id = 1 [jstype = JS_STRING]; }

// GUILD LIST
message AddGuildToGuildListRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string homeserver = 2;
}
message AddGuildToGuildListResponse {}

message RemoveGuildFromGuildListRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  string homeserver = 2;
}
message RemoveGuildFromGuildListResponse {}

// Permissions
message QueryPermissionsRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  string check_for = 3;
  uint64 as = 4;
}
message QueryPermissionsResponse { bool ok = 1; }

message Permission {
  enum Mode { Allow = 0; Deny = 1; }
  string matches = 1;
  Mode mode = 2;
}

message PermissionList { repeated Permission permissions = 1; }

message SetPermissionsRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 role_id = 3 [jstype = JS_STRING];
  PermissionList perms = 4;
}

message GetPermissionsRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 channel_id = 2 [jstype = JS_STRING];
  uint64 role_id = 3 [jstype = JS_STRING];
}
message GetPermissionsResponse { PermissionList perms = 1; }

message Role {
  uint64 role_id = 1 [jstype = JS_STRING];
  string name = 2;
  int32 color = 3;
  bool hoist = 4;
  bool pingable = 5;
}

message MoveRoleRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  uint64 role_id = 2 [jstype = JS_STRING];
  uint64 before_id = 3 [jstype = JS_STRING];
  uint64 after_id = 4 [jstype = JS_STRING];
}
message MoveRoleResponse {}

message GetGuildRolesRequest { uint64 guild_id = 1 [jstype = JS_STRING]; }
message GetGuildRolesResponse { repeated Role roles = 1; }

message AddGuildRoleRequest {
  uint64 guild_id = 1 [jstype = JS_STRING];
  Role role = 2;
}
message AddGuildRoleResponse { uint64 role_id = 1 [jstype = JS_STRING]; }

message DeleteGuildRoleRequest {
  uint64 guild_id = 1;
  uint64 role_id = 2;
}

message ManageUserRolesRequest {
  uint64 guild_id = 1;
  uint64 user_id = 2;
  repeated uint64 give_role_ids = 3;
  repeated uint64 take_role_ids = 4;
}

message GetUserRolesRequest {
  uint64 guild_id = 1;
  uint64 user_id = 2;
}

message GetUserRolesResponse { repeated uint64 roles = 1; }

service CoreService {
  // This doesn't require any permissions.
  rpc CreateGuild(CreateGuildRequest) returns(CreateGuildResponse) {}
  // This requires the "invites.manage.create" permission.
  rpc CreateInvite(CreateInviteRequest) returns(CreateInviteResponse) {}
  // This requires the "channels.manage.create" permission.
  rpc CreateChannel(CreateChannelRequest) returns(CreateChannelResponse) {}
  rpc CreateEmotePack(CreateEmotePackRequest) returns(CreateEmotePackResponse) {
  }

  rpc GetGuildList(GetGuildListRequest) returns(GetGuildListResponse) {}
  rpc AddGuildToGuildList(AddGuildToGuildListRequest)
      returns(AddGuildToGuildListResponse) {}
  rpc RemoveGuildFromGuildList(RemoveGuildFromGuildListRequest)
      returns(RemoveGuildFromGuildListResponse) {}

  rpc GetGuild(GetGuildRequest) returns(GetGuildResponse) {}
  // This requires the "invites.view" permission.
  rpc GetGuildInvites(GetGuildInvitesRequest) returns(GetGuildInvitesResponse) {
  }
  rpc GetGuildMembers(GetGuildMembersRequest) returns(GetGuildMembersResponse) {
  }
  // You will only be informed of channels you have the "messages.view"
  // permission for.
  rpc GetGuildChannels(GetGuildChannelsRequest)
      returns(GetGuildChannelsResponse) {}
  // This requires the "messages.view" permission.
  rpc GetChannelMessages(GetChannelMessagesRequest)
      returns(GetChannelMessagesResponse) {}
  // This requires the "messages.view" permission.
  rpc GetMessage(GetMessageRequest) returns(GetMessageResponse) {}
  rpc GetEmotePacks(GetEmotePacksRequest) returns(GetEmotePacksResponse) {}
  rpc GetEmotePackEmotes(GetEmotePackEmotesRequest)
      returns(GetEmotePackEmotesResponse) {}

  // This requires the "guild.manage.change-name" permission.
  rpc UpdateGuildName(UpdateGuildNameRequest) returns(google.protobuf.Empty) {}
  // This requires the "channels.manage.change-name" permission.
  rpc UpdateChannelName(UpdateChannelNameRequest)
      returns(google.protobuf.Empty) {}
  // This requires the "channels.manage.move" permission.
  rpc UpdateChannelOrder(UpdateChannelOrderRequest)
      returns(google.protobuf.Empty) {}
  // This requires the "messages.send" permission.
  rpc UpdateMessage(UpdateMessageRequest) returns(google.protobuf.Empty) {}
  rpc AddEmoteToPack(AddEmoteToPackRequest) returns(google.protobuf.Empty) {}

  // This requires the "guild.manage.delete" permission.
  rpc DeleteGuild(DeleteGuildRequest) returns(google.protobuf.Empty) {}
  // This requires the "invites.manage.delete" permission.
  rpc DeleteInvite(DeleteInviteRequest) returns(google.protobuf.Empty) {}
  // This requires the "channels.manage.delete" permission.
  rpc DeleteChannel(DeleteChannelRequest) returns(google.protobuf.Empty) {}
  // This requires the "messages.manage.delete" permission if you are not the
  // message author.
  rpc DeleteMessage(DeleteMessageRequest) returns(google.protobuf.Empty) {}
  rpc DeleteEmoteFromPack(DeleteEmoteFromPackRequest)
      returns(google.protobuf.Empty) {}
  rpc DeleteEmotePack(DeleteEmotePackRequest) returns(google.protobuf.Empty) {}
  rpc DequipEmotePack(DequipEmotePackRequest) returns(google.protobuf.Empty) {}

  rpc JoinGuild(JoinGuildRequest) returns(JoinGuildResponse) {}
  rpc LeaveGuild(LeaveGuildRequest) returns(google.protobuf.Empty) {}

  // This requires the "actions.trigger" permission.
  rpc TriggerAction(TriggerActionRequest) returns(google.protobuf.Empty) {}

  // This requires the "messages.send" permission.
  rpc SendMessage(SendMessageRequest) returns(SendMessageResponse) {}

  // This requires the "permissions.query" permission if you specify the As
  // field.
  rpc QueryHasPermission(QueryPermissionsRequest)
      returns(QueryPermissionsResponse) {}

  // This requires the "permissions.manage.set" permission.
  rpc SetPermissions(SetPermissionsRequest) returns(google.protobuf.Empty) {}

  // This requires the "permissions.manage.get" permission.
  rpc GetPermissions(GetPermissionsRequest) returns(GetPermissionsResponse) {}

  // This requires the "roles.move" permission.
  rpc MoveRole(MoveRoleRequest) returns(MoveRoleResponse) {}

  // This requires the "roles.get" permission.
  rpc GetGuildRoles(GetGuildRolesRequest) returns(GetGuildRolesResponse) {}

  // This requires the "roles.manage.create" permission.
  rpc AddGuildRole(AddGuildRoleRequest) returns(AddGuildRoleResponse) {}

  // This requires the "roles.manage.delete" permission.
  rpc DeleteGuildRole(DeleteGuildRoleRequest) returns(google.protobuf.Empty) {}

  // This requires the "roles.users.manage" permission.
  rpc ManageUserRoles(ManageUserRolesRequest) returns(google.protobuf.Empty) {}

  // This requires the "roles.users.get" permission.
  rpc GetUserRoles(GetUserRolesRequest) returns(GetUserRolesResponse) {}

  rpc StreamEvents(stream StreamEventsRequest) returns(stream Event) {}
}
