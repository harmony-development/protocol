syntax = "proto3";

import "google/protobuf/any.proto";

package protocol.harmonytypes.v1;

option go_package = "github.com/harmony-development/legato/gen/harmonytypes/v1";

import "google/protobuf/descriptor.proto";

// Metadata for methods. These are set in individual RPC endpoints and are
// typically used by servers.
message HarmonyMethodMetadata {
  // whether the method requires authentication.
  bool requires_authentication = 1;
  // whether the method allows federation or not.
  bool requires_local = 2;
  // the permission nodes required to invoke the method.
  string requires_permission_node = 3;
}

extend google.protobuf.MethodOptions {
  // Harmony method metadata.
  HarmonyMethodMetadata metadata = 1091;
}

// Metadata type used by many messages.
message Metadata {
  // Kind of this metadata.
  string kind = 1;
  // A map containing information.
  map<string, google.protobuf.Any> extension = 2;
}

// Error type that will be returned by servers. 
message Error {
  // The identifier of this error, can be used as an i18n key.
  string identifier = 1;
  // A (usually english) human message for this error.
  string human_message = 2;
  // More details about this message. Is dependent on the endpoint.
  bytes more_details = 3;
}

// Token that will be used for authentication.
message Token {
  // Ed25519 signature of the following serialized protobuf data, signed
  // with a private key. Which private key used to sign will be described
  // in the documentation.
  //
  // Has to be 64 bytes long, otherwise it will be rejected.
  bytes sig = 1;
  // Serialized protobuf data.
  // The protobuf type of this serialized data is dependent on the API endpoint
  // used.
  bytes data = 2;
}

// An object representing an item position between two other items.
message ItemPosition {
  // An object that represents the top of an ordered list.
  message Top {
    // The ID of the next item.
    uint64 next_id = 1;
  }
  // An object that represents a place between two items in an ordered list.
  message Between {
    // The ID of the previous item.
    uint64 previous_id = 1;
    // The ID of the next item.
    uint64 next_id = 2;
  }
  // An object that represents the bottom of an ordered list.
  message Bottom {
    // The ID of the previous item.
    uint64 previous_id = 1;
  }

  // Position of this item.
  oneof position {
    // The item is at the top.
    Top top = 1;
    // The item is in between two other items.
    Between between = 2;
    // The item is at the bottom.
    Bottom bottom = 3;
  }
}