syntax = "proto3";

package protocol.mediaproxy.v1;

// Object representing the metadata of a website.
message SiteMetadata {
  // Information pertaining to a thumbnail image.
  message ThumbnailImage {
    // URL of the thumbnail.
    string url = 1;
    // Width of the image, in pixels.
    uint32 width = 2;
    // Height of the image, in pixels.
    uint32 height = 3;
  }

  // Title of the website.
  string site_title = 1;
  // Page title of the website page.
  string page_title = 2;
  // Kind of the website.
  string kind = 3;
  // Description of the website page.
  string description = 4;
  // URL of the website.
  string url = 5;
  // A thumbnail image for the website.
  repeated ThumbnailImage thumbnail = 6;
}

// Object represeting the metadata of a media.
message MediaMetadata {
  // Information pertaining to an image.
  message ImageInfo {
    // Width of the image, in pixels.
    uint32 width = 1;
    // Height of the image, in pixels.
    uint32 height = 2;
  }

  // Mimetype of the media.
  string mimetype = 1;
  // Filename of the media.
  string name = 2;
  // File ID of the media.
  string id = 3;
  // SÄ±ze of the media.
  //
  // This should (usually) be the size taken from the `Content-Length` header
  // (for HTTP requests).
  // If this is not included, then it means the size could not be determined.
  optional uint32 size = 4;
  // Extra information specific to types of media.
  oneof info {
    // Information for an image media.
    ImageInfo image = 5;
  }
}

// Used in the `FetchLinkMetadata` endpoint.
message FetchLinkMetadataRequest {
  // URL to fetch metadata from.
  repeated string url = 1;
}
// Used in the `FetchLinkMetadata` endpoint.
message FetchLinkMetadataResponse {
  // Fetched metadata for a link.
  message Metadata {
    // Data of the metadata.
    oneof data {
      // Site metadata for the URL.
      SiteMetadata is_site = 1;
      // Media metadata for the URL.
      MediaMetadata is_media = 2;
    }
  }

  // Error data for a link.
  message Error {
    // Error status (usually HTTP, eg. `500 Internal Server Error`).
    string status = 1;
    // Error message, if the requested URL's server has provided one.
    string message = 2;
  }

  // Fetched metadata for the requested URL(s).
  map<string, Metadata> metadata = 1;
  // URL(s) that errored out while trying to fetch metadata for them.
  map<string, Error> errors = 2;
}

// Used in the `InstantView` endpoint.
message InstantViewRequest {
  // URL to get instant view for.
  string url = 1;
}
// Used in the `InstantView` endpoint.
message InstantViewResponse {
  // Site metadata for the URL.
  SiteMetadata metadata = 1;
  // Instant view content.
  string content = 2;
  // Whether the instant view is valid.
  bool is_valid = 3;
}
// Used in the `CanInstantView` endpoint.
message CanInstantViewRequest {
  // URL(s) to query if server can instant view the website.
  repeated string url = 1;
}
// Used in the `CanInstantView` endpoint.
message CanInstantViewResponse {
  // Whether the server generate an instant view for the URL(s) queried.
  map<string, bool> can_instant_view = 1;
}

// Harmony service for fetching metadata and generating instant view for URLs.
service MediaProxyService {
  // Endpoint to fetch metadata for a URL.
  rpc FetchLinkMetadata(FetchLinkMetadataRequest) returns (FetchLinkMetadataResponse) {
    option (harmonytypes.v1.metadata).requires_authentication = true;
  }
  // Endpoint to instant view a website URL.
  rpc InstantView(InstantViewRequest) returns (InstantViewResponse) {
    option (harmonytypes.v1.metadata).requires_authentication = true;
  }
  // Endpoint to query if the server can generate an instant view for a website URL.
  rpc CanInstantView(CanInstantViewRequest) returns (CanInstantViewResponse) {
    option (harmonytypes.v1.metadata).requires_authentication = true;
  }
}
