syntax = "proto3";

package protocol.chat.v1;

import "harmonytypes/v1/types.proto";

// Object representing a single permission node.
message Permission {
  // The permission matcher. (example: roles.manage).
  string matches = 1;
  // Whether the permission is allowed or not.
  bool ok = 2;
}

// Object representing a role without the ID.
message Role {
  // The role name.
  string name = 1;
  // The role color.
  int32 color = 2;
  // Whether the role is hoisted or not.
  bool hoist = 3;
  // Whether the role is mentionable or not.
  bool pingable = 4;
}

// Object representing a role with it's ID.
//
// The role ID for the default role in a guild should always be 0.
message RoleWithId {
  // ID of the role.
  uint64 role_id = 1;
  // The role data.
  Role role = 2;
}

// Used in the `HasPermission` endpoint.
message HasPermissionRequest {
  // The guild ID to query permissions for.
  uint64 guild_id = 1;
  // The channel ID to query permissions for. If not set, it will query
  // permissions for the guild.
  optional uint64 channel_id = 2;
  // The user ID to query permissions for (if not provided, the current user is
  // assumed).
  optional uint64 as = 4;
  // The permission node(s) to check for.
  repeated string check_for = 3;
}
// Used in the `HasPermission` endpoint.
message HasPermissionResponse {
  // The permissions for the requested node(s).
  repeated Permission perms = 1;
}

// Used in the `SetPermissions` endpoint.
message SetPermissionsRequest {
  // The guild ID to set permissions for.
  uint64 guild_id = 1;
  // The channel ID to set permissions for. Only set if the role is for a
  // channel.
  optional uint64 channel_id = 2;
  // The role ID to set permissions for.
  uint64 role_id = 3;
  // The list of permissions to set.
  repeated Permission perms_to_give = 4;
}
// Used in the `SetPermissions` endpoint.
message SetPermissionsResponse {}

// Used in the `GetPermissions` endpoint.
message GetPermissionsRequest {
  // The guild ID to get permissions for.
  uint64 guild_id = 1;
  // The channel ID(s) to get permissions for.
  // Only applicable for roles in a channel.
  repeated uint64 channel_ids = 2;
  // The role ID to get permissions for.
  uint64 role_id = 3;
}
// Used in the `GetPermissions` endpoint.
message GetPermissionsResponse {
  // Permissions of a role for a channel or guild.
  message Permissions {
    // The permissions.
    repeated Permission perms = 1;
  }

  // The permissions for the guild.
  Permissions guild_perms = 1;
  
  // The channel id -> permissions list map for the given role.
  //
  // This will contain permissions for any requested channels.
  map<uint64, Permissions> channel_perms = 2;
}

// Used in the `MoveRole` endpoint.
message MoveRoleRequest {
  // The guild ID to move the role in.
  uint64 guild_id = 1;
  // The role ID to move.
  uint64 role_id = 2;
  // The new position of the role.
  harmonytypes.v1.ItemPosition new_position = 3;
}
// Used in the `MoveRole` endpoint.
message MoveRoleResponse {}

// Used in the `GetGuildRoles` endpoint.
message GetGuildRolesRequest {
  // The guild ID to get roles for.
  uint64 guild_id = 1;
}
// Used in the `GetGuildRoles` endpoint.
message GetGuildRolesResponse {
  // The list of roles in the guild.
  repeated RoleWithId roles = 1;
}

// Used in the `AddGuildRole` endpoint.
message AddGuildRoleRequest {
  // The guild ID to add the role to.
  uint64 guild_id = 1;
  // The role name.
  string name = 2;
  // The role color.
  int32 color = 3;
  // Whether the role is hoisted or not.
  bool hoist = 4;
  // Whether the role is mentionable or not.
  bool pingable = 5;
}
// Used in the `AddGuildRole` endpoint.
message AddGuildRoleResponse {
  // The ID of the newly created role.
  uint64 role_id = 1;
}

// Used in the `DeleteGuildRole` endpoint.
message DeleteGuildRoleRequest {
  // The guild ID to delete the role from.
  uint64 guild_id = 1;
  // The role ID to delete.
  uint64 role_id = 2;
}
// Used in the `DeleteGuildRole` endpoint.
message DeleteGuildRoleResponse {}

// Used in the `ModifyGuildRole` endpoint.
message ModifyGuildRoleRequest {
  // The ID of the guild where the role is located.
  uint64 guild_id = 1;
  // The ID of the role to modify.
  uint64 role_id = 2;
  // The new name of the role.
  optional string new_name = 3;
  // The new color of the role.
  optional int32 new_color = 4;
  // The new hoist status of the role.
  optional bool new_hoist = 5;
  // The new pingable status of the role.
  optional bool new_pingable = 6;
}
// Used in the `ModifyGuildRole` endpoint.
message ModifyGuildRoleResponse {}

// Used in the `ManageUserRoles` endpoint.
message ManageUserRolesRequest {
  // The ID of the guild where the user is being managed.
  uint64 guild_id = 1;
  // The ID of the user to modify.
  uint64 user_id = 2;
  // The IDs of the roles to add.
  repeated uint64 give_role_ids = 3;
  // The IDs of the roles to remove.
  repeated uint64 take_role_ids = 4;
}
// Used in the `ManageUserRoles` endpoint.
message ManageUserRolesResponse {}

// Used in the `GetUserRoles` endpoint.
message GetUserRolesRequest {
  // The ID of the guild where the user(s) are located.
  uint64 guild_id = 1;
  // The ID(s) of the user to get roles for.
  repeated uint64 user_ids = 2;
}
// Used in the `GetUserRoles` endpoint.
message GetUserRolesResponse {
  // Contains role IDs for a user in a guild.
  message UserRoles {
    // A list of IDs of the roles the user has.
    repeated uint64 roles = 1; 
  }

  // User ID -> user role IDs map for the requested user(s).
  map<uint64, UserRoles> user_roles = 1;
}
