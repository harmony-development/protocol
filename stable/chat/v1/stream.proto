syntax = "proto3";

package protocol.chat.v1;

import "harmonytypes/v1/types.proto";
import "chat/v1/channels.proto";
import "chat/v1/guilds.proto";
import "chat/v1/messages.proto";
import "chat/v1/permissions.proto";
import "emote/v1/stream.proto";
import "profile/v1/stream.proto";

// Request type for use in the `StreamEvents` endpoint.
// By default, this endpoint will subscribe to all events.
// Any guilds / private channels joined in the future will be added to the subscription as well.
// Use the UnsubscribeFromAll event for unsubscribing from all current subscriptions and disable the automatic guild subscriptions.
message StreamEventsRequest {
  // Message to use for subscribing to a guild.
  message SubscribeToGuild {
    // The guild ID to subscribe to.
    uint64 guild_id = 1;
  }
  // Message to use for subscribing to a private channel.
  message SubscribeToPrivateChannel {
    // The channel ID to subscribe to.
    uint64 channel_id = 1;
  }
  // Message to use for subscribing to actions.
  message SubscribeToActions {}
  // Message to use for subscribing to homeserver events.
  message SubscribeToHomeserverEvents {}
  // Message to use for unsubscribing from all events.
  message UnsubscribeFromAll {}

  // Describes which event source to subscribe to.
  oneof request {
    // Subscribe to guild events.
    SubscribeToGuild subscribe_to_guild = 1;
    // Subscribe to private channel events.
    SubscribeToPrivateChannel subscribe_to_private_channel = 2;
    // Subscribe to action events.
    SubscribeToActions subscribe_to_actions = 3;
    // Subscribe to homeserver events.
    SubscribeToHomeserverEvents subscribe_to_homeserver_events = 4;
    // Unsubscribe from all events.
    UnsubscribeFromAll unsubscribe_from_all = 5;
  }
}

// Used in the `StreamEvents` endpoint.
message StreamEventsResponse {
  // Possible events.
  oneof event {
    // A chat event.
    StreamEvent chat = 1;
    // A emote event.
    emote.v1.StreamEvent emote = 2;
    // A profile event.
    profile.v1.StreamEvent profile = 3;
  }
}

// Describes an event.
message StreamEvent {
  // Event sent when a new message is sent.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel the message was sent in.
  message MessageSent {
    // ID that is sent by your client it can use to confirm that the message is sent.
    optional uint64 echo_id = 1;
    // Guild ID of the guild where this event happened.
    // Null if the event happened in a private channel.
    optional uint64 guild_id = 2;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 3;
    // Message ID of the message that was updated.
    uint64 message_id = 4;
    // The actual message.
    Message message = 5;
  }

  // Event sent when a message's content is updated.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel the message was updated in.
  message MessageUpdated {
    // Guild ID of the guild where this event happened.
    // Null if the event happened in a private channel.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 2;
    // Message ID of the message that was updated.
    uint64 message_id = 3;
    // When this message was edited, in seconds since unix epoch.
    uint64 edited_at = 4;
    // New message content.
    chat.v1.Content new_content = 5;
  }

  // Event sent when a message is deleted.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel the message was deleted in.
  message MessageDeleted {
    // Guild ID of the guild where this event happened.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 2;
    // Message ID of the message that was deleted.
    uint64 message_id = 3;
  }

  // Event sent when a new channel is created.
  message ChannelCreated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 2;
    // Name of this channel.
    string name = 3;
    // The position in the channel list.
    harmonytypes.v1.ItemPosition position = 4;
    // The kind of this channel.
    chat.v1.ChannelKind kind = 5;
    // Metadata for this channel.
    optional harmonytypes.v1.Metadata metadata = 6;
  }

  // Event sent when a channel's information is changed.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel that was updated.
  message ChannelUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel that was changed.
    uint64 channel_id = 2;
    // The new name of the channel.
    optional string new_name = 3;
    // The new metadata of the channel.
    optional harmonytypes.v1.Metadata new_metadata = 4;
  }

  // Event sent when a channel's position in the channel list is changed.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel that was moved.
  message ChannelPositionUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel that was changed.
    uint64 channel_id = 2;
    // The new position of the channel.
    optional harmonytypes.v1.ItemPosition new_position = 3;
  }

  // Event sent when all channels have been reordered.
  //
  // If a user does not have "messages.view" permission for a channel in here,
  // it should be omitted from the list.
  message ChannelsReordered {
    // guild_id: the guild whose channels are being reordered
    uint64 guild_id = 2;
    // channel_ids: the new order of channel IDs
    repeated uint64 channel_ids = 1;
  }

  // Event sent when a channel is deleted.
  //
  // This event will only be sent to users that have "messages.view" permission
  // for the channel that was deleted.
  message ChannelDeleted {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel that was deleted.
    uint64 channel_id = 2;
  }

  // Event sent when a guild's information is changed.
  message GuildUpdated {
    // Guild ID of the guild that was changed.
    uint64 guild_id = 1;
    // The new name of the guild.
    optional string new_name = 2;
    // The new picture of the guild.
    optional string new_picture = 3;
    // The new metadata of the guild.
    optional harmonytypes.v1.Metadata new_metadata = 4;
  }

  // Event sent when a guild is deleted.
  message GuildDeleted {
    // Guild ID of the guild that was deleted.
    uint64 guild_id = 1;
  }

  // Event sent a user joins to a guild.
  message MemberJoined {
    // Member ID of the member that joined the guild.
    uint64 member_id = 1;
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 2;
  }

  // Event sent when a member of a guild leaves said guild for whatever reason.
  message MemberLeft {
    // User ID of the member that left the guild.
    uint64 member_id = 1;
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 2;
    // Why this member left the guild.
    chat.v1.LeaveReason leave_reason = 3;
  }

  // Event sent when you join a new guild.
  message GuildAddedToList {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // The server ID of the homeserver this guild is on.
    optional string server_id = 2;
  }

  // Event sent when you leave a guild.
  message GuildRemovedFromList {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // The server ID homeserver this guild is on.
    optional string server_id = 2;
  }

  // Event sent when an action is performed.
  message ActionPerformed {
    // Guild ID of the guild where this event happened.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 2;
    // Message ID where this event happened.
    uint64 message_id = 3;
    // User ID of the user that triggered the action
    uint64 user_id = 4;
    // The custom info set by the bot 
    optional bytes info = 5;
    // The action data payload
    optional bytes payload = 6;
  }

  // Event sent when a role's position in the role list is changed.
  //
  // This event will only be sent to users with the "roles.get" permission.
  message RoleMoved {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Role ID of the role that was moved.
    uint64 role_id = 2;
    // New position of the role.
    harmonytypes.v1.ItemPosition new_position = 3;
  }

  // Event sent when a role is deleted.
  //
  // This event will only be sent to users with the "roles.get" permission.
  message RoleDeleted {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Role ID of the role that was deleted.
    uint64 role_id = 2;
  }

  // Event sent when a role is created.
  //
  // This event will only be sent to users with the "roles.get" permission.
  message RoleCreated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Role ID of the role that was created.
    uint64 role_id = 2;
    // The name of the role.
    string name = 3;
    // The color of the role.
    int32 color = 4;
    // The hoist status of the role.
    bool hoist = 5;
    // The pingable status of the role.
    bool pingable = 6;
  }

  // Event sent when a role's information is changed.
  //
  // This event will only be sent to users with the "roles.get" permission.
  message RoleUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Role ID of the role that was changed.
    uint64 role_id = 2;
    // The new name of the role.
    optional string new_name = 3;
    // The new color of the role.
    optional int32 new_color = 4;
    // The new hoist status of the role.
    optional bool new_hoist = 5;
    // The new pingable status of the role.
    optional bool new_pingable = 6;
  }

  // Event sent when a role's permissions are changed.
  //
  // This event will only be sent to users with the "roles.manage" permission.
  message RolePermissionsUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    optional uint64 channel_id = 2;
    // Role ID of the role that had it's permissions changed.
    uint64 role_id = 3;
    // The new permissions.
    repeated chat.v1.Permission new_perms = 4;
  }

  // Event sent when a user's roles are changed.
  //
  // This event will only be sent to users with the "roles.user.get" permission.
  message UserRolesUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // User ID of the user that had it's roles changed.
    uint64 user_id = 2;
    // The new role IDs.
    repeated uint64 new_role_ids = 3;
  }

  // Event sent when a user sends a typing notification in a guild channel.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the typing happened.
  message Typing {
    // User ID of the user that sent the typing notification.
    uint64 user_id = 1;
    // Guild ID of the guild where this event happened.
    optional uint64 guild_id = 2;
    // Channel ID of the channel where this event happened.
    uint64 channel_id = 3;
  }

  // Event sent when a permission is changed that matters to you.
  //
  // Servers should calculate which users to send this event to when a permission is set.
  // It should only be sent if a user is subscribed to the guild the permission pertains to.
  message PermissionUpdated {
    // Guild ID of the guild where this event happened.
    uint64 guild_id = 1;
    // Channel ID of the channel where this event happened.
    optional uint64 channel_id = 2;
    // The permission node that was changed.
    string query = 3;
    // Whether you have the permission or not.
    bool ok = 4;
  }

  // Sent when a message is pinned in a guild channel.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the message was pinned.
  message MessagePinned {
    // Guild ID of the guild where this event occured.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event occured.
    uint64 channel_id = 2;
    // Message ID of the message that was pinned.
    uint64 message_id = 3;
  }

  // Sent when a message is unpinned in a guild channel.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the message was unpinned.
  message MessageUnpinned {
    // Guild ID of the guild where this event occured.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event occured.
    uint64 channel_id = 2;
    // Message ID of the message that was unpinned.
    uint64 message_id = 3;
  }

  // Sent when a new reaction is added to a message. This is only sent if
  // such a reaction wasn't on the message, otherwise see `ReactionAdded`.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the reaction was added.
  message NewReactionAdded {
    // Guild ID of the guild where this event occured.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event occured.
    uint64 channel_id = 2;
    // Message ID of the message that had a reaction added.
    uint64 message_id = 3;
    // The reaction that was added.
    chat.v1.Reaction reaction = 4;
  }

  // Sent when an existing reaction is added to a message. This is only sent
  // such a reaction was on the message, otherwise see `NewReactionAdded`.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the reaction was added.
  message ReactionAdded {
    // Guild ID of the guild where this event occured.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event occured.
    uint64 channel_id = 2;
    // Message ID of the message that had a reaction added.
    uint64 message_id = 3;
    // The data of the reaction that was added.
    string reaction_data = 4;
  }

  // Sent when an existing reaction is removed from a message.
  //
  // Should only be sent to users who have the "message.view" permission for
  // the guild channel where the reaction was removed.
  message ReactionRemoved {
    // Guild ID of the guild where this event occured.
    optional uint64 guild_id = 1;
    // Channel ID of the channel where this event occured.
    uint64 channel_id = 2;
    // Message ID of the message that had a reaction removed.
    uint64 message_id = 3;
    // The data of the reaction that was removed.
    string reaction_data = 4;
  }

  // Sent when there's a new owner.
  message OwnerAdded {
    // Guild ID of the guild where this event occured.
    uint64 guild_id = 2;
    // User ID of the new owner.
    uint64 user_id = 1;
  }

  // Sent when an owner gives up their ownership.
  message OwnerRemoved {
    // Guild ID of the guild where this event occured.
    uint64 guild_id = 2;
    // User ID of the user who is no longer owner.
    uint64 user_id = 1;
  }

  // Sent when an invite is received.
  message InviteReceived {
    // The user ID of the inviter.
    uint64 inviter_id = 1;
    // The server ID of the server the inviter is on.
    optional server_id = 2;
    // The location where the user was invited to.
    oneof location {
      // The unique identifier of a user's invite to another
      // user to join a given guild.
      string guild_invite_id = 3;
      // The channel ID of the private channel that the user was invited to.
      uint64 channel_id = 4;
    }
  }

  // Sent when an invite is rejected by the invitee.
  message InviteRejected {
    // The user ID of the invitee.
    uint64 invitee_id = 1;
    // The server ID of the server the invitee is on.
    optional server_id = 2;
    // The location where the user was invited to.
    oneof location {
      // The unique identifier of a user's invite to another
      // user to join a given guild.
      string guild_invite_id = 3;
      // The channel ID of the private channel that the user was invited to.
      uint64 channel_id = 4;
    }
  }

  // Sent when an invite is created in a guild.
  //
  // This will only be sent to members of a guild with "invites.view" permission.
  message InviteCreated {
    // Guild ID of the guild that this occured for.
    uint64 guild_id = 1;
    // ID of the invite that was created.
    string invite_id = 2;
    // Possible uses of the created invite.
    uint32 possible_uses = 3;
  }

  // Sent when an invite is deleted in a guild.
  //
  // This can occur because of the invite being used up (0 remaining uses),
  // or a user deleting the invite.
  //
  // This will only be sent to members of a guild with "invites.view" permission.
  message InviteDeleted {
    // Guild ID of the guild that this occured for.
    uint64 guild_id = 1;
    // ID of the invite that was deleted.
    string invite_id = 2;
  }

  // Sent when an invite is used once by a user.
  //
  // This will only be sent to members of a guild with "invites.view" permission.
  message InviteUsed {
    // Guild ID of the guild that this occured for.
    uint64 guild_id = 1;
    // ID of the invite that was used.
    string invite_id = 2;
    // User ID of the user that used this invite.
    uint64 user_id = 3;
  }

  // Sent when a private channel is deleted.
  message PrivateChannelDeleted {
    // The channel ID of the private channel that was deleted.
    uint64 channel_id = 1;
  }

  // Sent when a private channel is added to an user's private channel list.
  message PrivateChannelAddedToList {
    // The channel ID of the private channel that was added.
    uint64 channel_id = 1;
    // The server ID of the homeserver of this private channel.
    optional string server_id = 2;
  }
  // Sent when a private channel is removed from an user's private channel list.
  message PrivateChannelRemovedFromList {
    // The channel ID of the private channel that was removed.
    uint64 channel_id = 1;
    // The server ID of the homeserver of this private channel.
    optional string server_id = 2;
  }
  // Sent when a user joins a private channel.
  message UserJoinedPrivateChannel {
    // The channel ID of the private channel.
    uint64 channel_id = 1;
    // The user ID of the user who joined the private channel.
    uint64 user_id = 2;
  }
  // Sent when a user leaves a private channel.
  message UserLeftPrivateChannel {
    // The channel ID of the private channel.
    uint64 channel_id = 1;
    // The user ID of the user who left the private channel.
    uint64 user_id = 2;
  }

  // Which event to send.
  oneof event {
    // Send the guild added to list event.
    GuildAddedToList guild_added_to_list = 1;
    // Send the guild removed from list event.
    GuildRemovedFromList guild_removed_from_list = 2;
    // Send the action performed event.
    ActionPerformed action_performed = 3;
    // Send the message sent event.
    MessageSent sent_message = 4;
    // Send the message updated event.
    MessageUpdated edited_message = 5;
    // Send the message deleted event.
    MessageDeleted deleted_message = 6;
    // Send the channel created event.
    ChannelCreated created_channel = 7;
    // Send the channel updated event.
    ChannelUpdated edited_channel = 8;
    // Send the channel deleted event.
    ChannelDeleted deleted_channel = 9;
    // Send the guild updated event.
    GuildUpdated edited_guild = 10;
    // Send the guild deleted event.
    GuildDeleted deleted_guild = 11;
    // Send the member joined event.
    MemberJoined joined_member = 12;
    // Send the member left event.
    MemberLeft left_member = 13;
    // Send the typing event.
    Typing typing = 14;
    // Send the role created event.
    RoleCreated role_created = 15;
    // Send the role deleted event.
    RoleDeleted role_deleted = 16;
    // Send the role moved event.
    RoleMoved role_moved = 17;
    // Send the role updated event.
    RoleUpdated role_updated = 18;
    // Send the role perms updated event.
    RolePermissionsUpdated role_perms_updated = 19;
    // Send the user roles updated event.
    UserRolesUpdated user_roles_updated = 20;
    // Send the permission updated event.
    PermissionUpdated permission_updated = 21;
    // The channels have been completely reordered.
    ChannelsReordered channels_reordered = 22;
    // Send the channel position updated event.
    ChannelPositionUpdated edited_channel_position = 23;
    // Send the message pinned event.
    MessagePinned message_pinned = 24;
    // Send the message unpinned event.
    MessageUnpinned message_unpinned = 25;
    // Send the owner added event.
    OwnerAdded owner_added = 26;
    // Send the owner removed event.
    OwnerRemoved owner_removed = 27;
    // Send the guild invite received event.
    InviteReceived invite_received = 28;
    // Send the guild invite rejected event.
    InviteRejected invite_rejected = 29;
    // Send the invite created event.
    InviteCreated invite_created = 30;
    // Send the invite deleted event.
    InviteDeleted invite_deleted = 31;
    // Send the invite used event.
    InviteUsed invite_used = 32;
    // Send the new reaction added event.
    NewReactionAdded new_reaction_added = 33;
    // Send the reaction added event.
    ReactionAdded reaction_added = 34;
    // Send the reaction removed event.
    ReactionRemoved reaction_removed = 35;
    // Send the private channel deleted event.
    PrivateChannelDeleted private_channel_deleted = 36;
    // Send the private channel added to list event.
    PrivateChannelAddedToList private_channel_added_to_list = 37;
    // Send the private channel removed from list event.
    PrivateChannelRemovedFromList private_channel_removed_from_list = 38;
    // Send the user joined private channel event.
    UserJoinedPrivateChannel user_joined_private_channel = 39;
    // Send the user left private channel event.
    UserLeftPrivateChannel user_left_private_channel = 40;
  }
}
