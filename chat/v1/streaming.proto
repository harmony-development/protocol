syntax = "proto3";

package protocol.chat.v1;

import "harmonytypes/v1/types.proto";
import "google/protobuf/timestamp.proto";
import "chat/v1/permissions.proto";

option go_package = "github.com/harmony-development/legato/gen/chat/v1";

message StreamEventsRequest {
  message SubscribeToGuild { uint64 guild_id = 1; }
  message SubscribeToActions {}
  message SubscribeToHomeserverEvents {}

  oneof request {
    SubscribeToGuild subscribe_to_guild = 1;
    SubscribeToActions subscribe_to_actions = 2;
    SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
  }
}

message Event {
  enum LeaveReason {
    willingly = 0;
    banned = 1;
    kicked = 2;
  }
  message MessageSent {
    uint64 echo_id = 1;
    harmonytypes.v1.Message message = 2;
  }
  message MessageUpdated {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    uint64 message_id = 3;
    google.protobuf.Timestamp edited_at = 4;
    string content = 5;
  }
  message MessageDeleted {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    uint64 message_id = 3;
  }
  message ChannelCreated {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    string name = 3;
    uint64 previous_id = 4;
    uint64 next_id = 5;
    bool is_category = 6;
    harmonytypes.v1.Metadata metadata = 7;
  }
  message ChannelUpdated {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    string name = 3;
    bool update_name = 4;
    uint64 previous_id = 5;
    uint64 next_id = 6;
    bool update_order = 7;
    harmonytypes.v1.Metadata metadata = 8;
    bool update_metadata = 9;
  }
  message ChannelDeleted {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
  }
  message GuildUpdated {
    uint64 guild_id = 1;
    string name = 2;
    bool update_name = 3;
    string picture = 4;
    bool update_picture = 5;
    harmonytypes.v1.Metadata metadata = 6;
    bool update_metadata = 7;
  }
  message GuildDeleted { uint64 guild_id = 1; }
  message MemberJoined {
    uint64 member_id = 1;
    uint64 guild_id = 2;
  }
  message MemberLeft {
    uint64 member_id = 1;
    uint64 guild_id = 2;
    LeaveReason leave_reason = 3;
  }
  message GuildAddedToList {
    uint64 guild_id = 1;
    string homeserver = 2;
  }
  message GuildRemovedFromList {
    uint64 guild_id = 1;
    string homeserver = 2;
  }
  message ActionPerformed {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    uint64 message_id = 3;
    string action_id = 4;
    string action_data = 5;
  }
  message RoleMoved {
    uint64 guild_id = 1;
    uint64 role_id = 2;
    uint64 previous_id = 3;
    uint64 next_id = 4;
  }
  message RoleDeleted {
    uint64 guild_id = 1;
    uint64 role_id = 2;
  }
  message RoleCreated {
    uint64 guild_id = 1;
    uint64 role_id = 2;
    chat.v1.Role role = 3;
  }
  message RoleUpdated {
    uint64 guild_id = 1;
    uint64 role_id = 3;
    chat.v1.Role role = 4;
  }
  // This event will only be sent to users with the "guild.manage" permission.
  message RolePermissionsUpdated {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    uint64 role_id = 3;
    chat.v1.PermissionList perms = 4;
  }
  message UserRolesUpdated {
    uint64 guild_id = 1;
    uint64 user_id = 2;
    repeated uint64 role_ids = 3;
  }
  message ProfileUpdated {
    uint64 user_id = 1;
    string new_username = 2;
    bool update_username = 3;
    string new_avatar = 4;
    bool update_avatar = 5;
    harmonytypes.v1.UserStatus new_status = 6;
    bool update_status = 7;
    bool is_bot = 8;
    bool update_is_bot = 9;
  }
  message Typing {
    uint64 user_id = 1;
    uint64 guild_id = 2;
    uint64 channel_id = 3;
  }
  // Servers should calculate which users to send this event to when a permission is set.
  // It should only be sent if a user is subscribed to the guild the permission pertains to.
  message PermissionUpdated {
    uint64 guild_id = 1;
    uint64 channel_id = 2;
    string query = 3;
    bool ok = 4;
  }
  // Should only be sent to users who have the pack equipped.
  message EmotePackUpdated {
    // ID of the pack that was updated.
    uint64 pack_id = 1;
    // New pack name of the pack.
    string pack_name = 2;
    // Whether to update the pack name or not.
    bool update_pack_name = 3;
  }
  // Should only be sent to users who have the pack equipped.
  message EmotePackDeleted {
    // ID of the pack that was deleted.
    uint64 pack_id = 1;
  }
  // Should only be sent to users who have the pack equipped.
  message EmotePackEmotesUpdated {
    // ID of the pack to update the emotes of.
    uint64 pack_id = 1;
    // The added emotes.
    repeated chat.v1.Emote added_emotes = 2;
    // The image IDs of the deleted emotes.
    repeated string deleted_emotes = 3;
  }

  oneof event {
    GuildAddedToList guild_added_to_list = 1;
    GuildRemovedFromList guild_removed_from_list = 2;
    ActionPerformed action_performed = 3;
    MessageSent sent_message = 4;
    MessageUpdated edited_message = 5;
    MessageDeleted deleted_message = 6;
    ChannelCreated created_channel = 7;
    ChannelUpdated edited_channel = 8;
    ChannelDeleted deleted_channel = 9;
    GuildUpdated edited_guild = 10;
    GuildDeleted deleted_guild = 11;
    MemberJoined joined_member = 12;
    MemberLeft left_member = 13;
    ProfileUpdated profile_updated = 14;
    Typing typing = 15;
    RoleCreated role_created = 16;
    RoleDeleted role_deleted = 17;
    RoleMoved role_moved = 18;
    RoleUpdated role_updated = 19;
    RolePermissionsUpdated role_perms_updated = 20;
    UserRolesUpdated user_roles_updated = 21;
    PermissionUpdated permission_updated = 22;
    EmotePackUpdated emote_pack_updated = 23;
    EmotePackDeleted emote_pack_deleted = 24;
    EmotePackEmotesUpdated emote_pack_emotes_updated = 25;
  }
}
