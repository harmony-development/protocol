syntax = "proto3";

package protocol.chat.v1;

import "harmonytypes/v1/types.proto";

option go_package = "github.com/harmony-development/legato/gen/chat/v1";

// Object representing a guild without the ID part.
message Guild {
  // The name of the guild.
  string name = 1;
  // The picture HMC of the guild.
  string picture = 2;
  // User ID of the owner of the guild.
  uint64 owner_id = 3;
  // Metadata of the guild.
  optional harmonytypes.v1.Metadata metadata = 4;
}

// Object representing an invite without the ID part.
message Invite {
  // Possible uses of this invite. A use of `0` means infinite uses.
  uint32 possible_uses = 1;
  // Total use count of this invite.
  uint32 use_count = 2;
}

// Invite with ID.
message InviteWithId {
  // ID of the invite.
  string invite_id = 1;
  // The invite data.
  Invite invite = 2;
}

// Object representing a guild list entry.
message GuildListEntry {
  // Guild ID of this guild entry.
  uint64 guild_id = 1;
  // Homeserver of this guild.
  string host = 2;
}

// Request type used in `CreateGuild` RPC. 
message CreateGuildRequest {
  // The name of the guild.
  string name = 1;
  // The picture HMC of the guild.
  string picture = 2;
  // Metadata of the guild.
  optional harmonytypes.v1.Metadata metadata = 3;
}
// Used in the `CreateGuild` endpoint.
message CreateGuildResponse {
  // Guild ID of the guild that was created.
  uint64 guild_id = 1;
}

// Used in the `CreateInvite` endpoint.
message CreateInviteRequest {
  // Guild ID of the guild to create an invite in.
  uint64 guild_id = 1;
  // The name of the invite.
  string name = 2;
  // The possible uses of the invite.
  //
  // A possible use of `0` means that the invite can be used infinitely many times.
  uint32 possible_uses = 3;
}
// Used in the `CreateInvite` endpoint.
message CreateInviteResponse {
  // The invite ID of the invite that was created.
  string invite_id = 1;
}

// Used in the `GetGuildList` endpoint.
message GetGuildListRequest {}
// Used in the `GetGuildList` endpoint.
message GetGuildListResponse {
  // Guild list returned by the server.
  repeated GuildListEntry guilds = 1;
}

// Used in the `GetGuild` endpoint.
message GetGuildRequest {
  // Guild ID of the guild to get information about.
  uint64 guild_id = 1;
}
// Used in the `GetGuild` endpoint.
message GetGuildResponse {
  // The information of the guild requested.
  Guild guild = 1;
}

// Used in the `GetGuildInvites` endpoint.
message GetGuildInvitesRequest {
  // Guild ID of the guild you want to get invites of.
  uint64 guild_id = 1;
}
// Used in the `GetGuildInvites` endpoint.
message GetGuildInvitesResponse {
  // The invites of the guild, with IDs.
  repeated InviteWithId invites = 1;
}

// Used in the `GetGuildMembers` endpoint.
message GetGuildMembersRequest {
  // Guild ID of the guild you want to get members of.
  uint64 guild_id = 1;
}
// Used in the `GetGuildMembers` endpoint.
message GetGuildMembersResponse {
  // User IDs of all the guild members.
  repeated uint64 members = 1;
}

// Used in the `UpdateGuildInformation` endpoint.
message UpdateGuildInformationRequest {
  // Guild ID of the guild you want to update the information of.
  uint64 guild_id = 1;
  // New name for the guild.
  optional string new_guild_name = 2;
  // New picture for the guild.
  optional string new_guild_picture = 3;
  // New metadata for the guild.
  optional harmonytypes.v1.Metadata new_metadata = 4;
}
// Used in the `UpdateGuildInformation` endpoint.
message UpdateGuildInformationResponse {}

// Used in the `DeleteGuild` endpoint.
message DeleteGuildRequest {
  // Guild ID of the guild you want to delete.
  uint64 guild_id = 1;
}
// Used in the `DeleteGuild` endpoint.
message DeleteGuildResponse {}

// Used in the `DeleteInvite` endpoint.
message DeleteInviteRequest {
  // Guild ID of the guild where the invite is located.
  uint64 guild_id = 1;
  // Invite ID of the invite you want to delete.
  string invite_id = 2;
}
// Used in the `DeleteInvite` endpoint.
message DeleteInviteResponse {}

// Used in the `JoinGuild` endpoint.
message JoinGuildRequest {
  // Invite ID of the guild you want to join.
  string invite_id = 1;
}
// Used in the `JoinGuild` endpoint.
message JoinGuildResponse {
  // Guild ID of the guild you joined.
  uint64 guild_id = 1;
}

// Used in the `PreviewGuild` endpoint.
message PreviewGuildRequest {
  // Invite ID of the guild you want to get information from.
  string invite_id = 1;
}
// Used in the `PreviewGuild` endpoint.
message PreviewGuildResponse {
  // Name of the guild requested.
  string name = 1;
  // Picture of the guild requested.
  string picture = 2;
  // Member count of the guild requested.
  uint64 member_count = 3;
}

// Used in the `LeaveGuild` endpoint.
message LeaveGuildRequest {
  // Guild ID of the guild you want to leave.
  uint64 guild_id = 1;
}
// Used in the `LeaveGuild` endpoint.
message LeaveGuildResponse {}

// Used in `BanUser` endpoint.
message BanUserRequest {
  // The guild ID of the guild to ban the user from.
  uint64 guild_id = 1;
  // The ID of the user to ban.
  uint64 user_id = 2;
}
// Used in `BanUser` endpoint.
message BanUserResponse {}

// Used in `KickUser` endpoint.
message KickUserRequest {
  // The guild ID of the guild to kick the user from.
  uint64 guild_id = 1;
  // The user ID of the user to kick.
  uint64 user_id = 2;
}
// Used in `KickUser` endpoint.
message KickUserResponse {}

// Used in `UnbanUser` endpoint.
message UnbanUserRequest {
  // The guild ID of the guild to unban the user from.
  uint64 guild_id = 1;
  // The user ID of the user to unban.
  uint64 user_id = 2;
}
// Used in `UnbanUser` endpoint.
message UnbanUserResponse {}
