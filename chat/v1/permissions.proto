syntax = "proto3";

package protocol.chat.v1;

option go_package = "github.com/harmony-development/legato/gen/chat/v1";

message QueryPermissionsRequest {
  uint64 guild_id = 1;
  uint64 channel_id = 2;
  string check_for = 3;
  uint64 as = 4;
}
message QueryPermissionsResponse { bool ok = 1; }

// Request data for the BatchQueryHasPermission endpoint
message BatchQueryHasPermissionRequest {
  // the permission checks to run
  repeated QueryPermissionsRequest requests = 1;
}
// Response data for the BatchQueryHasPermission endpoint
message BatchQueryHasPermissionResponse {
  // the permission responses
  repeated QueryPermissionsResponse responses = 1;
}

message Permission {
  enum Mode {
    Allow = 0;
    Deny = 1;
  }
  string matches = 1;
  Mode mode = 2;
}

message PermissionList { repeated Permission permissions = 1; }

// Request data for the SetPermissions endpoint
message SetPermissionsRequest {
  // the guild ID for the role to update
  uint64 guild_id = 1;
  // the channel ID for the role to update
  optional uint64 channel_id = 2;
  // the role ID for the role to update
  uint64 role_id = 3;
  // the new list of permissions
  PermissionList perms = 4;
}
// Response data for the SetPermissions endpoint
message SetPermissionsResponse {}

message GetPermissionsRequest {
  uint64 guild_id = 1;
  uint64 channel_id = 2;
  uint64 role_id = 3;
}
message GetPermissionsResponse { PermissionList perms = 1; }

message Role {
  uint64 role_id = 1;
  string name = 2;
  int32 color = 3;
  bool hoist = 4;
  bool pingable = 5;
}

message MoveRoleRequest {
  uint64 guild_id = 1;
  uint64 role_id = 2;
  uint64 before_id = 3;
  uint64 after_id = 4;
}
message MoveRoleResponse {}

message GetGuildRolesRequest { uint64 guild_id = 1; }
message GetGuildRolesResponse { repeated Role roles = 1; }

message AddGuildRoleRequest {
  uint64 guild_id = 1;
  Role role = 2;
}
message AddGuildRoleResponse { uint64 role_id = 1; }

message DeleteGuildRoleRequest {
  uint64 guild_id = 1;
  uint64 role_id = 2;
}
// Response data for the DeleteGuildRole endpoint
message DeleteGuildRoleResponse {}

// Request data for the ModifyGuildRole endpoint
message ModifyGuildRoleRequest {
  // the ID of the guild where the role is being modified
  uint64 guild_id = 1;
  // the updated role data
  Role role = 2;
  // whether name should be updated
  bool modify_name = 3;
  // whether color should be updated
  bool modify_color = 4;
  // whether hoist should be updated
  bool modify_hoist = 5;
  // whether pingable should be updated
  bool modify_pingable = 6;
}

// Response data for the ModifyGuildRole endpoint
message ModifyGuildRoleResponse {}

message ManageUserRolesRequest {
  uint64 guild_id = 1;
  uint64 user_id = 2;
  repeated uint64 give_role_ids = 3;
  repeated uint64 take_role_ids = 4;
}

// Response data for the ManageUserRoles endpoint
message ManageUserRolesResponse {}

message GetUserRolesRequest {
  uint64 guild_id = 1;
  uint64 user_id = 2;
}

message GetUserRolesResponse { repeated uint64 roles = 1; }