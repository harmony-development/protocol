syntax = "proto3";

import "harmonytypes/v1/types.proto";

package protocol.chat.v1;

option go_package = "github.com/harmony-development/legato/gen/chat/v1";

// Channel Kinds:
//
// Channel kinds specified in an official Harmony protocol will start with a
// "h." prefix. Third-party extensions should not use the "h." prefix. If no
// kind is specified, the channel is a text channel.
//
// Kinds indicate additional functionality a channel may have: for example,
// h.voice can indicate that a channel has voice functionalities alongside
// the usual text fare.
//
message CreateChannelRequest {
  uint64 guild_id = 1;
  string channel_name = 2; //  [(validate.rules).string.min_len = 1]
  bool is_category = 3;
  uint64 previous_id = 5;
  uint64 next_id = 4;
  harmonytypes.v1.Metadata metadata = 6;
}
message CreateChannelResponse { uint64 channel_id = 1; }

message GetGuildChannelsRequest { uint64 guild_id = 1; }
message GetGuildChannelsResponse {
  message Channel {
    harmonytypes.v1.Metadata metadata = 4;

    uint64 channel_id = 1;
    string channel_name = 2;
    bool is_category = 3;
  }

  repeated Channel channels = 1;
}

message UpdateChannelInformationRequest {
  uint64 guild_id = 1;
  uint64 channel_id = 2;

  string name = 3;
  bool update_name = 4;

  harmonytypes.v1.Metadata metadata = 5;
  bool update_metadata = 6;
}

message UpdateChannelOrderRequest {
  uint64 guild_id = 1;
  uint64 channel_id = 2;
  uint64 previous_id = 3;
  uint64 next_id = 4;
}

// Request specifiying the order of all channels in a guild at once
message UpdateAllChannelOrderRequest {
  // guild_id: the guild to specify the new channel order for
  uint64 guild_id = 1;
  // channel_ids: the new order of channel ids
  repeated uint64 channel_ids = 2;
}

// Request
message DeleteChannelRequest {
  // the channel
  uint64 guild_id = 1;
  //
  uint64 channel_id = 2;
}

// Request which notifies a user is typing
message TypingRequest {
  // the guild the user is typing in
  uint64 guild_id = 1;
  // the channel the user is typing in
  uint64 channel_id = 2;
}

// Response for a typing request
message TypingResponse {}