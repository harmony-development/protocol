syntax = "proto3";

import "google/protobuf/empty.proto";
import "harmonytypes/v1/types.proto";

package protocol.auth.v1;

option go_package = "github.com/harmony-development/legato/gen/auth/v1";

message BeginAuthResponse { string auth_id = 1; }

message Session {
  uint64 user_id = 1 [jstype = JS_STRING];
  string session_token = 2;
}

// AuthStep
// A step in the authentication process
// Contains a variety of different types of views
// It is recommended to have a fallback_url specified
// For non-trivial authentication procedures (such as captchas)
message AuthStep {
  // Choice
  // A step which allows the user to choose from a range of options
  // Allows you to show a heading by specifying title
  message Choice {
    string title = 1;
    repeated string options = 2;
  }

  // Form
  // A step which requires the user to input information
  // Allows you to show a heading by specifying title
  message Form {
    // FormField
    // A field in the form, containing information on how it should
    // be rendered
    // Here is a list of form types that need to be supported:
    // email: a field type that has to contain a valid email
    // password: a field type that has to contain a password
    // new-password: a field type for new passwords
    // text: a field type that has to contain text
    // number: a field type that has to contain a number
    message FormField {
      string name = 1;
      string type = 2;
    }

    string title = 1;
    repeated FormField fields = 2;
  }

  // Waiting
  // A step which requires the user to perform an external action
  // The title and description should explain to the user
  // what they should do to complete this step
  message Waiting {
    string title = 1;
    string description = 2;
  }

  string fallback_url = 1;
  bool can_go_back = 2;

  oneof step {
    Choice choice = 3;
    Form form = 4;
    Session session = 5;
    Waiting waiting = 6;
  }
}

// NextStepRequest
// contains the client's response to the server's challenge
// This needs to be called first with no arguments to
// receive the first step
message NextStepRequest {
  string auth_id = 1;

  // A simple choice string indicating which option the user chose
  message Choice { string choice = 1; }

  // Form fields can either be bytes, string, or int64.
  message FormFields {
    oneof field {
      bytes bytes = 1;
      string string = 2;
      int64 number = 3;
    }
  }

  // An array of form fields, in the same order they came in from the server
  message Form { repeated FormFields fields = 1; }

  oneof step {
    Choice choice = 2;
    Form form = 3;
  }
}

// StepBackRequest
// A request to go back 1 step
message StepBackRequest { string auth_id = 1; }

// StreamStepsRequest
// Required to be initiated by all authenticating clients
// Allows the server to send steps
message StreamStepsRequest { string auth_id = 1; }

// Connection
message FederateRequest { string target = 1; }
message FederateReply {
  string token = 1;
  string nonce = 2;
}

message KeyReply { string key = 1; }

message LoginFederatedRequest {
  string auth_token = 1;
  string domain = 2;
}

// # Federation
//
// Servers should generate and persist an RSA public and private
// key. These will be referred to later on simply as the public
// and private keys of the server.
//
// Federate is the core of Harmony's federation model.
// The client sends the server name of the foreignserver
// to its homeserver using the Federate method.
//
// The homeserver generates a JWT, signed using SHA-RSA-256 and the homeserver's private key,
// containing the following fields, described using Golang's JSON semantics:
// ```
// UserID   uint64
// Target   string
// Username string
// Avatar   string
// ```
//
// The target should be the foreignserver's server name.
// The user ID should be the client's user ID on the homeserver.
// The username and avatar should be the client's username and avatar,
// so the foreignserver knows what username and avatar to give them.
//
// The return should be the stringified form of that JWT.
//
// The client will use this token in a LoginFederatedRequest request
// and send it to the foreignserver as the auth_token field, with the
// domain field filled out to the server name of the homeserver.
//
// TODO: finish

service AuthService {
  rpc Federate(FederateRequest) returns(FederateReply);
  rpc LoginFederated(LoginFederatedRequest) returns(Session);
  rpc Key(google.protobuf.Empty) returns(KeyReply);
  rpc BeginAuth(google.protobuf.Empty) returns(BeginAuthResponse);
  rpc NextStep(NextStepRequest) returns(AuthStep);
  rpc StepBack(StepBackRequest) returns(AuthStep);
  rpc StreamSteps(StreamStepsRequest) returns(stream AuthStep);
  rpc CheckLoggedIn(google.protobuf.Empty) returns(google.protobuf.Empty) {
    option (harmonytypes.v1.metadata).requires_authentication = true;
    option (harmonytypes.v1.metadata).requires_permission_node = "";
  }
}
