syntax = "proto3";

import "google/protobuf/empty.proto";
import "harmonytypes/v1/types.proto";

package protocol.sync.v1;

option go_package = "github.com/harmony-development/legato/gen/sync/v1";

// Authentication data that will be sent in a `harmonytypes.v1.Token`.
message AuthData {
  // The server name of the server initiating the transaction. For Pull,
  // this tells the server being connected to which homeservers' events it should send.
  // For Push, this tells the server being connected to which homeservers' events it is
  // receiving.
  string host = 1;
  // The UTC UNIX time in seconds of when the request is started. Servers should reject
  // tokens with a time too far from the current time, at their discretion. A recommended
  // variance is 1 minute.
  uint64 time = 2;
}

message EventQueue {
  repeated Event events = 1;
}

message Event {
  message UserRemovedFromGuild {
    uint64 user_id = 1;
    uint64 guild_id = 2;
  }
  message UserAddedToGuild {
  	uint64 user_id = 1;
  	uint64 guild_id = 2;
  }

  oneof kind {
    UserRemovedFromGuild user_removed_from_guild = 1;
    UserAddedToGuild user_added_to_guild = 2;
  }
}

// # Postbox
//
// The postbox service forms the core of Harmony's server <-> server communications.
//
// It concerns the transfer of Events between servers, as well as ensuring reliable
// delivery of them.
//
// The semantics of events are documented in the event types. The postbox service
// is solely reliable for reliable pushing and pulling.
//
// ## Authorisation
//
// Requests are authorised using a serialized `harmonytypes.v1.Token` in the Authorization HTTP header.
// The `data` field of the token will be a serialized `AuthData` message.
// The private key used to sign is the homeserver's private key.
//
// ## Events
//
// In this section, we will use sender and recipient to refer to the servers
// sending the events and the server receiving the events respectively.
//
// At PostboxService startup, a sender should first Pull all receivers it had
// federated from before.
//
// The sender will attempt to Push to the receiver. If the Push RPC fails,
// the event will be dispatched to the sender's queue for the receiver.
//
service PostboxService {
  rpc Pull(google.protobuf.Empty) returns (EventQueue) {}
  rpc Push(Event) returns (google.protobuf.Empty) {}
}
